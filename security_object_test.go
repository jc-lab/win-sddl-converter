package winsddlconverter

import (
	"encoding/hex"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestSecurityDescriptor_ToSddl(t *testing.T) {
	tests := []struct {
		name string
		hex  string
		sddl string
	}{
		//// same but order is different...
		//{
		//	"C:/Windows",
		//	"0100049414000000340000000000000054000000010600000000000550000000b589fb381984c2cb5c6c236d5700776ec0026487010600000000000550000000b589fb381984c2cb5c6c236d5700776ec0026487020054010d00000000002800ff011f00010600000000000550000000b589fb381984c2cb5c6c236d5700776ec0026487000a280000000010010600000000000550000000b589fb381984c2cb5c6c236d5700776ec002648700001400bf011300010100000000000512000000000b14000000001001010000000000051200000000001800bf01130001020000000000052000000020020000000b1800000000100102000000000005200000002002000000001800a900120001020000000000052000000021020000000b1800000000a001020000000000052000000021020000000b14000000001001010000000000030000000000001800a9001200010200000000000f0200000001000000000b1800000000a0010200000000000f020000000100000000001800a9001200010200000000000f0200000002000000000b1800000000a0010200000000000f0200000002000000",
		//	"O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:(A;OICIIO;GA;;;CO)(A;OICIIO;GA;;;SY)(A;;0x1301bf;;;SY)(A;OICIIO;GA;;;BA)(A;;0x1301bf;;;BA)(A;OICIIO;GXGR;;;BU)(A;;0x1200a9;;;BU)(A;CIIO;GA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;0x1200a9;;;AC)(A;OICIIO;GXGR;;;AC)(A;;0x1200a9;;;S-1-15-2-2)(A;OICIIO;GXGR;;;S-1-15-2-2)",
		//},
		{
			"C:/testdir",
			"0100048488000000a40000000000000014000000020074000500000000131800ff011f000102000000000005200000002002000000131400ff011f0001010000000000051200000000131800a90012000102000000000005200000002102000000101400bf01130001010000000000050b000000001b1400000001e001010000000000050b000000010500000000000515000000d5f5e336d1deab50504a58b6e9030000010500000000000515000000d5f5e336d1deab50504a58b601020000",
			"O:S-1-5-21-920909269-1353440977-3059239504-1001G:S-1-5-21-920909269-1353440977-3059239504-513D:AI(A;OICIID;FA;;;BA)(A;OICIID;FA;;;SY)(A;OICIID;0x1200a9;;;BU)(A;ID;0x1301bf;;;AU)(A;OICIIOID;SDGXGWGR;;;AU)",
		},
		{
			"C:/test.txt",
			"010014bc7800000088000000140000003000000002001c00010000001110140001000000010100000000001000300000020048000300000000001400a900120001010000000000010000000000001800ff011f0001020000000000052000000020020000000014009f01120001010000000000051200000001020000000000052000000020020000010100000000000512000000",
			"O:BAG:SYD:PAI(A;;0x1200a9;;;WD)(A;;FA;;;BA)(A;;0x12019f;;;SY)S:PAI(ML;ID;0x1;;;S-1-16-12288)",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			raw, err := hex.DecodeString(tt.hex)
			if err != nil {
				t.Fatal(err)
			}
			sd, err := ParseBinary(raw)
			if err != nil {
				t.Fatal(err)
			}
			if got := sd.ToSddl(); got != tt.sddl {
				t.Errorf("ToSddl() = \n%v\nwant\n%v", got, tt.sddl)
			}

			generated, err := sd.ToBinary()
			if err != nil {
				t.Fatal(err)
			}
			assert.Equal(t, raw, generated)

			sddlParsed, err := ParseSDDL(tt.sddl)
			if err != nil {
				t.Errorf("ParseSDDL failed: %+v: %+v", tt.sddl, err)
			}
			assert.Equal(t, tt.sddl, sddlParsed.ToSddl())
		})
	}
}
